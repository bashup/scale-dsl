#!/usr/bin/env bash
json() {
	if declare -F "json.$1" >/dev/null 2>&1; then "json.$@"
	elif [[ ${1-} == [-0-9]* ]]; then json.num "$1"
	else
		read -rd '' -a REPLY < <(compgen -A function json.)
		fail "invalid argument '$1'; must be one of: ${REPLY[*]/json./}"
	fi
}

json.map:(){
	local items=(); ::block __mapitem; REPLY=${items[@]+${items[*]}}; REPLY="{${REPLY%,}}"
}
__mapitem() { json.str "$1"; local key=$REPLY; json "${@:2}"; items+=("$key:$REPLY,"); }

json.list:(){
	local items=(); ::block __listitem; REPLY=${items[@]+${items[*]}}; REPLY="[${REPLY%,}]"
}
__listitem(){ json "$@"; items+=("$REPLY,"); }

json.json() { REPLY=$1; }
json.true() { REPLY=true; }
json.false(){ REPLY=false; }
json.null() { REPLY=null; }

json.int(){
	[[ ${1-} =~ ^-?(0|[1-9][0-9]*)$ ]] || fail "invalid json int: '$1'" || return
	REPLY=$1
}
json.num(){
	[[ ${1-} =~ ^-?(0|[1-9][0-9]*)([.][0-9]+)?([Ee][-+]?[0-9]+)?$ ]] ||
		fail "invalid json number: '$1'" || return
	REPLY=$1
}

json.str(){
	[[ $1 != *\\* ]] || set -- "${1//\\/\\\\}"
	[[ $1 != *'"'* ]] || set -- "${1//\"/\\\"}"
	if [[ $1 == *[[:cntrl:]]* ]]; then
		set -- "${1//$'\n'/\\n}"; set -- "${1//$'\r'/\\r}"; set -- "${1//$'\t'/\\t}"  # \n\r\t
		if [[ $1 == *[[:cntrl:]]* ]]; then
			local r s=${1//[^[:cntrl:]]}
			while [[ $s ]]; do
				printf -v r \\\\u%04x "'${s:0:1}"; set -- "${1//${s:0:1}/$r}"
				s=${s//${s:0:1}/}
			done
		fi
	fi
	set -- "${1/#/\"}"; REPLY=${1/%/\"}  # add surrounding quotes
}
